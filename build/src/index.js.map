{"version":3,"sources":["../../src/index.js"],"names":["Stage","constructor","stageIdx","_addPair","pairs","second","push","_getFromArray","ari","isStage","stage","createStage","namedFunction","name","func","args","Task","inputShape","_arrows","_nodes","computer","input","chainFromStagePromises","Error","inputStage","inport","addStage","Number","isInteger","Array","fill","map","ignore","idx","isArray","inputName","TypeError","nodeIdx","length","inputStages","inputPromises","arrayOfInputStages","Promise","objectOfInputStages","Object","values","entries","then","inputValue","inputEntries","execute","tracker","Tracker","dummy","nodes","stagePromises","node","outputPromise","ExtrinsicPromise","inputNode","resolve","inputStagesReady","stageComplete","inputs","stageStarted","computerX","res","stageCompleted","error","stageFailed","adopt","p","all","stageValues","getResult","stages","keys","outputName","waitFor","propName","stageValue","buildObject","withSingleInput","withInputArray","withInputsNamed","names","withInputsShapedLike","obj"],"mappings":"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","sourcesContent":["import Promise from 'bluebird'\nimport Tracker from './tracker'\nimport buildObject from 'build-object-better'\nimport ExtrinsicPromise from 'extrinsic-promises'\n\nclass Stage {\n  constructor (stageIdx) {\n    this._addPair = (pairs, second) => {\n      pairs.push([stageIdx, second])\n    }\n    this._getFromArray = (ari) => ari[stageIdx]\n  }\n}\n\nfunction isStage (stage) {\n  return stage instanceof Stage\n}\n\nfunction createStage (stageIdx) {\n  return new Stage(stageIdx)\n}\n\nfunction namedFunction (name, func) {\n  return ({\n    [name]: function (...args) { return func(...args) }\n  })[name]\n}\n\nexport default class Task {\n  constructor (inputShape = null) {\n    // An ordered pair of node (indices into this._nodes, below)\n    this._arrows = []\n\n    // Each node is just a transformation (possibly impure) from inputs to a value.\n    this._nodes = [{\n      computer: namedFunction('--input--', input => input),\n      chainFromStagePromises: () => { throw new Error('The input node\\'s chainFromStagePromises method should not be used') }\n    }]\n\n    const inputStage = createStage(0)\n    if (inputShape == null) {\n      this.inport = this.addStage(inputStage, namedFunction('--inport--', input => input))\n    } else if (Number.isInteger(inputShape)) {\n      this.inport = new Array(inputShape).fill(null).map((ignore, idx) => {\n        return this.addStage(inputStage, namedFunction(`--inport-${idx}--`, (input) => input[idx]))\n      })\n    } else if (Array.isArray(inputShape)) {\n      this.inport = buildObject(\n        inputShape,\n        inputName => this.addStage(inputStage, namedFunction(`--inport-${inputName}--`, (input) => input[inputName]))\n      )\n    } else {\n      throw new TypeError(`Unexpected input port shape: ${inputShape}`)\n    }\n  }\n\n  addStage (inputShape, computer) {\n    const nodeIdx = this._nodes.length\n    let chainFromStagePromises\n    let inputStages\n    if (isStage(inputShape)) {\n      const inputStage = inputShape\n      inputStages = [inputStage]\n      chainFromStagePromises = (inputPromises) => inputStage._getFromArray(inputPromises)\n    } else if (Array.isArray(inputShape)) {\n      const arrayOfInputStages = inputShape\n      inputStages = arrayOfInputStages\n      chainFromStagePromises = (inputPromises) => Promise.map(arrayOfInputStages, inputStage => inputStage._getFromArray(inputPromises))\n    } else {\n      const objectOfInputStages = inputShape\n      inputStages = Object.values(objectOfInputStages)\n      chainFromStagePromises = (inputPromises) => Promise.map(\n        Object.entries(objectOfInputStages),\n        ([inputName, inputStage]) => inputStage._getFromArray(inputPromises).then(inputValue => [inputName, inputValue])\n      )\n        .then(inputEntries => buildObject(inputEntries))\n    }\n    for (let inputStage of inputStages) {\n      inputStage._addPair(this._arrows, nodeIdx)\n    }\n    this._nodes.push({ computer, chainFromStagePromises })\n    return createStage(nodeIdx)\n  }\n\n  execute (input, tracker = Tracker.dummy) {\n    const nodes = []\n    const stagePromises = []\n    for (let { computer, chainFromStagePromises } of this._nodes) {\n      const node = {\n        inputPromises: [],\n        outputPromise: new ExtrinsicPromise(),\n        computer,\n        chainFromStagePromises,\n        name: computer.name,\n        idx: nodes.length\n      }\n      nodes.push(node)\n      stagePromises.push(node.outputPromise)\n    }\n    const [inputNode] = nodes\n    inputNode.chainFromStagePromises = () => Promise.resolve(input)\n\n    for (let node of nodes) {\n      const inputStagesReady = node.chainFromStagePromises(stagePromises)\n      const stageComplete = inputStagesReady\n        .then(inputs => {\n          tracker.stageStarted(node.idx, inputs);\n          return node.computerX(inputs)\n        })\n        .then(\n          res => {\n            tracker.stageCompleted(node.idx, res)\n            return res\n          },\n          error => {\n            tracker.stageFailed(node.idx, error)\n            throw error\n          }\n        )\n      node.outputPromise.adopt(stageComplete);\n    }\n\n    const p = Promise.all(stagePromises)\n      .then(stageValues => ({\n        getResult: (stages) => {\n          if (isStage(stages)) {\n            return stages._getFromArray(stageValues)\n          } else if (Array.isArray(stages)) {\n            return stages.map(stage => stage._getFromArray(stageValues))\n          } else if (typeof stages === 'object') {\n            return buildObject(\n              Object.keys(stages),\n              outputName => stages[outputName]._getFromArray(stageValues)\n            )\n          } else {\n            throw new TypeError(`Unknown output shape: ${stages}`)\n          }\n        }\n      }))\n\n    p.waitFor = (stages) => {\n      if (isStage(stages)) {\n        return stages._getFromArray(stagePromises)\n      } else if (Array.isArray(stages)) {\n        return Promise.map(stages, stage => stage._getFromArray(stagePromises))\n      } else if (typeof stages === 'object') {\n        return Promise.map(Object.entries(stages), ([propName, stage]) => {\n          return stage._getFromArray(stagePromises).then(stageValue => ([propName, stageValue]))\n        }).then(buildObject)\n      } else {\n        throw new TypeError(`Unknown stage shape: ${stages}`)\n      }\n    }\n    return p\n  }\n}\nTask.withSingleInput = function () {\n  return new Task(null)\n}\n\nTask.withInputArray = function (length) {\n  return new Task(length)\n}\n\nTask.withInputsNamed = function (names) {\n  return new Task(names)\n}\n\nTask.withInputsShapedLike = function (obj) {\n  return new Task(Object.keys(obj))\n}\n"],"file":"index.js"}